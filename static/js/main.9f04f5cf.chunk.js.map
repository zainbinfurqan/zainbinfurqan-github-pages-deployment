{"version":3,"sources":["redux/reducers/loadingReducer.js","redux/reducers/userReducer.js","redux/reducers/index.js","constants/index.js","apis/index.js","redux/actions/userAction.js","redux/sagas/index.js","redux/index.js","redux/actions/lodingActions.js","ToDoApp/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","isloading","users","combineReducers","loadingReducer","state","action","console","log","type","payload","userReducer","constants","LOADING_START","LOADING_END","SET_USER_DATA","fetchUsers","a","fetch","response","json","status","Error","error","actions","value","loading","fetchApi","rootSaga","takeEvery","call","put","usersActions","setUsers","all","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","run","connect","dispatch","loadingAction","loadingActions","props","onClick","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"yRACMA,EAAe,CACjBC,WAAW,GCDf,IAAMD,EAAe,CACjBE,MAAO,ICCIC,kBAAgB,CAC3BC,eFCW,WAAuD,IAA/BC,EAA8B,uDAAtBL,EAAcM,EAAQ,uCAEjE,OADAC,QAAQC,IAAI,WAAYF,GAChBA,EAAOG,MACX,IAAK,gBAEL,IAAK,cACD,OAAO,2BAAKJ,GAAZ,IAAmBJ,UAAWK,EAAOI,UACzC,QACI,OAAOL,IERfM,YDAW,WAAuD,IAA/BN,EAA8B,uDAAtBL,EAAcM,EAAQ,uCAEjE,OADAC,QAAQC,IAAI,WAAYF,GAChBA,EAAOG,MACX,IAAK,gBACD,OAAO,2BAAKJ,GAAZ,IAAmBH,MAAOI,EAAOI,UACrC,QACI,OAAOL,M,uBEJJO,EAPG,CACdC,cAAe,gBACfC,YAAa,cACbC,cAAe,iB,QCHbC,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,8CADZ,cACXC,EADW,gBAEEA,EAASC,OAFX,UAEXA,EAFW,OAGfb,QAAQC,IAAI,SAAUY,GACE,MAApBD,EAASE,OAJE,sBAKL,IAAIC,MAAMF,EAAKG,OALV,gCAORH,GAPQ,4CAAH,qDCGZI,EAAU,CAGdA,SAAmB,SAAAC,GAAK,MAAK,CACzBhB,KAAMG,EAAUG,cAChBL,QAASe,KAEED,I,WCLLE,G,WAKAC,G,WAUeC,GAfzB,SAAUF,IAAV,iEACI,OADJ,SACUG,YAAUjB,EAAUC,cAAec,GAD7C,uCAKA,SAAUA,IAAV,uEAEuB,OAFvB,kBAE6BG,YAAKd,GAFlC,OAGQ,OADIG,EAFZ,gBAGcY,YAAIC,EAAaC,SAASd,IAHxC,OAIQ,OAJR,SAIcY,YAAI,CAAEtB,KAAMG,EAAUE,YAAaJ,SAAS,IAJ1D,+GAUe,SAAUkB,IAAV,iEACX,OADW,SACLM,YAAI,CACNR,MAFO,uCCff,IAAMS,EAAiBC,cAGjBC,EAAQC,YACVC,EACAC,YAAQC,YAAgBN,GAAiBO,OAAOC,8BAAgCD,OAAOC,iCAG3FR,EAAeS,IAAIhB,GAEJS,QCZXb,EAAU,CAGdA,cAAwB,SAAAC,GAAK,MAAK,CAC9BhB,KAAMG,EAAUC,cAChBH,QAASe,KAEED,ICYf,IASeqB,eATS,SAACR,GAAD,MAAY,CAChCX,QAASW,EAAMjC,eAAeH,cAGP,SAAA6C,GAAQ,MAAK,CAEpCC,cAAe,SAACtB,GAAD,OAAWqB,EAASE,EAAeD,cAActB,QAGrDoB,EA3Bf,SAAiBI,GASb,OACI,6BACK1C,QAAQC,IAAIyC,EAAMvB,SACnB,4BAAQwB,QARhB,WACID,EAAMF,eAAc,KAOhB,qBCDGI,MAVf,WACE,OACE,kBAAC,IAAD,CAAUd,MAAOA,GACf,yBAAKe,UAAU,OACb,kBAAC,EAAD,SCGYC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACLhB,QAAQgB,MAAMA,EAAM8C,c","file":"static/js/main.9f04f5cf.chunk.js","sourcesContent":["\nconst initialState = {\n    isloading: false\n}\n\nexport default function loadingReducer(state = initialState, action) {\n    console.log(\"action=>\", action)\n    switch (action.type) {\n        case 'LOADING_START':\n            return { ...state, isloading: action.payload };\n        case 'LOADING_END':\n            return { ...state, isloading: action.payload };\n        default:\n            return state;\n    }\n}","\nconst initialState = {\n    users: []\n}\n\nexport default function loadingReducer(state = initialState, action) {\n    console.log(\"action=>\", action)\n    switch (action.type) {\n        case 'SET_USER_DATA':\n            return { ...state, users: action.payload };\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux'\nimport loadingReducer from './loadingReducer'\nimport userReducer from './userReducer'\nexport default combineReducers({\n    loadingReducer,\n    userReducer\n})","const constants = {\n    LOADING_START: 'LOADING_START',\n    LOADING_END: 'LOADING_END',\n    SET_USER_DATA: 'SET_USER_DATA'\n}\n\n\nexport default constants","const fetchUsers = async () => {\n    let response = await fetch('https://jsonplaceholder.typicode.com/users')\n    let json = await response.json()\n    console.log(\"json=>\", json)\n    if (response.status !== 200) {\n        throw new Error(json.error)\n    }\n    return json\n}\n\n\nexport { fetchUsers }","import constants from '../../constants'\n\n\nlet actions = {}\n\n\nactions.setUsers = value => ({\n    type: constants.SET_USER_DATA,\n    payload: value\n})\nexport default actions;","import { takeEvery, all, call, put } from 'redux-saga/effects'\nimport constants from '../../constants'\nimport { fetchUsers } from '../../apis'\nimport usersActions from '../actions/userAction'\n\nfunction* loading() {\n    yield takeEvery(constants.LOADING_START, fetchApi)\n}\n\n\nfunction* fetchApi() {\n    try {\n        let response = yield call(fetchUsers);\n        yield put(usersActions.setUsers(response))\n        yield put({ type: constants.LOADING_END, payload: false })\n    } catch (error) {\n\n    }\n}\n\nexport default function* rootSaga() {\n    yield all([\n        loading()\n    ])\n}","import { createStore, compose, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer from './reducers'\nimport rootSaga from './sagas'\n\nconst sagaMiddleware = createSagaMiddleware();\n\n\nconst store = createStore(\n    rootReducer,\n    compose(applyMiddleware(sagaMiddleware), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n)\n\nsagaMiddleware.run(rootSaga)\n\nexport default store","import constants from '../../constants'\n\n\nlet actions = {}\n\n\nactions.loadingAction = value => ({\n    type: constants.LOADING_START,\n    payload: value\n})\nexport default actions;","import React, { } from 'react';\nimport { connect } from 'react-redux'\nimport loadingActions from '../redux/actions/lodingActions';\n// import constants from '../constants'\nfunction ToDoApp(props) {\n\n\n\n    function handleStarLoading() {\n        props.loadingAction(true)\n    }\n\n\n    return (\n        <div>\n            {console.log(props.loading)}\n            <button onClick={handleStarLoading}>Start Loading</button>\n\n        </div>\n    )\n}\n\nconst mapStateToProps = (store) => ({\n    loading: store.loadingReducer.isloading\n})\n\nconst mapDispatchToProps = dispatch => ({\n    // loadingAction: loadingActions.loadingAction\n    loadingAction: (value) => dispatch(loadingActions.loadingAction(value))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDoApp);","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux'\nimport store from './redux'\nimport ToDoApp from './ToDoApp'\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <ToDoApp />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}